class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution:
    def inorderTraversal(self, root):
        def traverse(node):
            if not node:
                return []
            return traverse(node.left) + [node.val] + traverse(node.right)

        return traverse(root)


# ツリー構築ヘルパー関数
def buildTree(values):
    if not values:
        return None
    root = TreeNode(values[0])
    nodes = [root]
    i = 1
    while i < len(values):
        node = nodes.pop(0)
        if values[i] is not None:
            node.left = TreeNode(values[i])
            nodes.append(node.left)
        i += 1
        if i < len(values) and values[i] is not None:
            node.right = TreeNode(values[i])
            nodes.append(node.right)
        i += 1
    return root


# テストケース実行
test_cases = [[1, None, 2, 3], [], [1]]

for i, test_case in enumerate(test_cases, 1):
    solution = Solution()
    root = buildTree(test_case)
    print(f"Test Case {i}: {solution.inorderTraversal(root)}")
